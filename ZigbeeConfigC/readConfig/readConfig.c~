#include <stdio.h>
#include <fcntl.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <termios.h>


int send(int fd, char* str, char* buf, __useconds_t waitMicros, size_t size);


int main(int argc, char* args[])
{
    if(argc<2)
    {
        printf("Usage : %s <serial port>\n",args[0]);
        return 1;
    }

    struct termios tty, tty_old;
    memset(&tty, 0, sizeof(tty));

    int fd = open(args[1],O_RDWR|O_NOCTTY|O_NDELAY|O_NONBLOCK);
    if(fd<0)
    {
        perror("Error during serial port opening ");
        return 1;
    }

    if(tcgetattr(fd, &tty) != 0)
    {
        perror("Error from tcgetattr ");
        return 1;
    }

    tty_old = tty;

    if(cfsetospeed(&tty, (speed_t)B9600)<0)
    {
        perror("Error from cfsetospeed ");
        return 1;
    }
    if(cfsetispeed(&tty, (speed_t)B9600)<0)
    {
        perror("Error from cfsetispeed ");
        return 1;
    }

    tty.c_cflag     &=  ~PARENB;            // Make 8n1
    tty.c_cflag     &=  ~CSTOPB;
    tty.c_cflag     &=  ~CSIZE;
    tty.c_cflag     |=  CS8;

    tty.c_cflag     &=  ~CRTSCTS;           // no flow control
    tty.c_cc[VMIN]   =  0;                  // read doesn't block
    tty.c_cc[VTIME]  =  0;                  // 0.5 seconds read timeout
    tty.c_cflag     |=  CREAD | CLOCAL;     // turn on READ & ignore ctrl lines

    tcflush(fd, TCIFLUSH);
    if(tcsetattr(fd, TCSANOW, &tty) != 0)
    {
        perror("Error from tcsetattr ");
        return 1;
    }

    char buf[16] = "";

    send(fd,"+++",buf,1100100,16);
    send(fd,"ATCH\r",buf,100000,16);
    send(fd,"ATID\r",buf,100000,16);
    send(fd,"ATMY\r",buf,100000,16);
    send(fd,"ATDL\r",buf,100000,16);
    send(fd,"ATDH\r",buf,100000,16);
    send(fd,"ATBD\r",buf,100000,16);
    send(fd,"ATCN\r",buf,100000,16);

    tcflush(fd, TCIFLUSH);
    if(tcsetattr(fd, TCSANOW, &tty_old) != 0)
    {
        perror("Error from tcsetattr ");
        return 1;
    }
    close(fd);

    return 0;
}

int send(int fd, char* str, char* buf, __useconds_t waitMicros, size_t size)
{
    char copy[30];
    sprintf(copy,"%s",str);
    unsigned int i=0;
    for(;i<30;i++)
        if(copy[i]=='\n'||copy[i]=='\r')
            copy[i] = ' ';
    if((int)write(fd,str,strlen(str))<(int)strlen(str))
    {
        char msg[50];
        sprintf(msg,"Error during send (%s)\n",copy);
        perror(msg);
        return -1;
    }
    printf("%s => ",copy);
    fflush(stdout);
    usleep(waitMicros);
    memset(buf,0,size);
    int n = read(fd,buf,size);
    if(n<0)
    {
        char msg[50];
        sprintf(msg,"Error during read after (%s)\n",copy);
        perror(msg);
        return 1;
    }
    printf("%d bytes read : %s\n",n,buf);
    return 0;
}

